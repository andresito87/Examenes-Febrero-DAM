/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package componentes;

import java.awt.Color;
import java.util.Calendar;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import programa.EstadoActionListener;
import programa.FechaPersonalizada;
import programa.ShowMessageAction;


/**
 *
 * @author elena
 */
public class TestComponente extends javax.swing.JFrame {

    public TestComponente() {

        initComponents();
        

        final FechaPersonalizada fechaEjecucion = fechaHoraDigital1.getFechaEjecucion();
        final JLabel jLabelCargado = panelFechaHoraDigital1.getjLabelCargado();

        fechaHoraDigital1.addMessageAction(new ShowMessageAction() {

            @Override
            public void programaEjecutado() {
                System.out.println("Programa Ejecutado mostrar mensaje");
                JOptionPane op = new JOptionPane("El programa ha sido ejecutado", JOptionPane.PLAIN_MESSAGE);
                op.setBackground(Color.GREEN);
                op.createDialog(null, "Programa ejecutado correctamente").setVisible(true);
                jLabelCargado.setText("Ejecutado");
                jLabelCargado.setBackground(Color.GREEN);

            }

            @Override
            public void introducirEjecutableYFecha() {
                mensajeAviso("Debe introducir la Fecha de Planificación y el Ejecutable",
                        "Cargar programa y seleccionar Fecha");
            }
        });

        this.panelFechaHoraDigital1.addCambiarEstado(new EstadoActionListener() {

            @Override
            public void cambiarEstado() {
                System.out.println(panelFechaHoraDigital1.getjLabelCargado());

                System.out.println(fechaHoraDigital1.getFilePath());
                if (fechaHoraDigital1.getFilePath() == null || fechaEjecucion == null) {
                    mensajeAviso("Debe introducir la Fecha de Planificación y el Ejecutable",
                            "Cargar programa y seleccionar Fecha");
                    return;
                }

                System.out.println("Ejecutar programa");
                if (jLabelCargado.getText().equals("CARGADO")) {
                    Calendar fechaActual = Calendar.getInstance();
                    if (fechaEjecucion.getAnio() > fechaActual.get(Calendar.YEAR)
                            && fechaEjecucion.getMes() > fechaActual.get(Calendar.MONTH)
                            && fechaEjecucion.getDia() > fechaActual.get(Calendar.DAY_OF_MONTH)) {
                        return;
                    }
                    if (fechaEjecucion.getHora() > fechaActual.get(Calendar.HOUR_OF_DAY)
                            && fechaEjecucion.getMinuto() > fechaActual.get(Calendar.MINUTE)
                            && fechaEjecucion.getSegundo() > fechaActual.get(Calendar.SECOND)) {
                        return;
                    }
                    jLabelCargado.setText("EJECUTADO");
                    jLabelCargado.setBackground(Color.GREEN);
                    jLabelCargado.setOpaque(true);
                }
                if (jLabelCargado.getText().equals("NO CARGADO")) {

                    jLabelCargado.setText("CARGADO");
                    jLabelCargado.setBackground(Color.ORANGE);
                    jLabelCargado.setOpaque(true);

                    String mensaje = String.format("Se va a ejecutar el programa %s a las %d/%d/%d %d:%d:%d",
                            fechaHoraDigital1.getFilePath(),
                            fechaEjecucion.getDia(),
                            //Sumamos uno al mes porque Date devuelve los meses empezando por 0
                            fechaEjecucion.getMes() + 1,
                            fechaEjecucion.getAnio(),
                            fechaEjecucion.getHora(),
                            fechaEjecucion.getMinuto(),
                            fechaEjecucion.getSegundo());

                    JOptionPane op = new JOptionPane(mensaje, JOptionPane.PLAIN_MESSAGE);
                    op.setBackground(Color.ORANGE);
                    op.createDialog(null, "Programada ejecución").setVisible(true);
                }
            }

        });
       
       

    }

    private void mensajeAviso(String mensaje, String tituloVentana) {
        JOptionPane op = new JOptionPane(mensaje,
                JOptionPane.PLAIN_MESSAGE);
        op.setBackground(Color.red);
        op.createDialog(null, tituloVentana).setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fechaHoraDigital1 = new programa.FechaHoraDigital();
        panelFechaHoraDigital1 = new programa.PanelFechaHoraDigital();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(fechaHoraDigital1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(panelFechaHoraDigital1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(fechaHoraDigital1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelFechaHoraDigital1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestComponente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestComponente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestComponente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestComponente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestComponente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private programa.FechaHoraDigital fechaHoraDigital1;
    private programa.PanelFechaHoraDigital panelFechaHoraDigital1;
    // End of variables declaration//GEN-END:variables
}
