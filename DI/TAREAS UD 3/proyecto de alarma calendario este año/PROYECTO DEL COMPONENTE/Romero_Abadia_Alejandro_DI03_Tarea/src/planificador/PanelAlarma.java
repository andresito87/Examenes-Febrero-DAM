/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package planificador;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

/**
 *
 * @author Alejandro Romero Abadía
 */
public class PanelAlarma extends javax.swing.JPanel {

    /**
     * Creates new form PanelAlarma
     */
    public PanelAlarma() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelFechaHora = new javax.swing.JLabel();
        jLabelTarea = new javax.swing.JLabel();
        jSpinnerFechaHora = new javax.swing.JSpinner();
        jTextFieldTarea = new javax.swing.JTextField();

        jLabelFechaHora.setText("Fecha y hora de la alarma:");

        jLabelTarea.setText("Descripción de la tarea:");

        jSpinnerFechaHora.setModel(new javax.swing.SpinnerDateModel());

        jTextFieldTarea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldTareaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabelTarea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldTarea))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelFechaHora)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinnerFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 174, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFechaHora)
                    .addComponent(jSpinnerFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTarea)
                    .addComponent(jTextFieldTarea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldTareaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTareaKeyTyped
        if(jTextFieldTarea.getText().length() == 30){
            evt.consume();  // Si se escribe mas de 30 caracteres se genera el evento y se impide seguir escribiendo.
        }
    }//GEN-LAST:event_jTextFieldTareaKeyTyped

    // Se extraen los datos de los dos componentes y se devuelven para ser gestionados por el PropertyEditor.
    public Alarma getSelectedValue(){

        LocalDateTime fechaHora = ((Date)jSpinnerFechaHora.getValue()).toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime(); // Se extrae la fecha del componente en formato Date y se convierte a LocalDateTime.
        String tarea = jTextFieldTarea.getText();   // Se extrae el texto del componente.
        
        return new Alarma(fechaHora, tarea);    // Se devuelve un objeto Alarma con los datos extraídos.
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelFechaHora;
    private javax.swing.JLabel jLabelTarea;
    private javax.swing.JSpinner jSpinnerFechaHora;
    private javax.swing.JTextField jTextFieldTarea;
    // End of variables declaration//GEN-END:variables
}
