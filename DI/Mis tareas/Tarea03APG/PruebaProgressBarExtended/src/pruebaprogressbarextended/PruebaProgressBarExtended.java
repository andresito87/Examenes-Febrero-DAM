package pruebaprogressbarextended;

import javax.swing.JOptionPane;

/**
 * Clase principal que prueba el funcionamiento del componente
 * ProgressBarExtended.
 * <p>
 * Esta aplicación gráfica incluye un deslizador que está vinculado a una barra
 * de progreso extendida. También muestra mensajes de alerta cuando se alcanzan
 * ciertos rangos predefinidos en la barra de progreso.
 * </p>
 *
 * <h2>Características:</h2>
 * <ul>
 * <li>Interfaz gráfica con un deslizador para controlar la barra de
 * progreso.</li>
 * <li>Mensajes emergentes que indican los rangos alcanzados.</li>
 * <li>Vinculación entre el valor del deslizador y la barra de progreso.</li>
 * </ul>
 *
 * @author ANDRÉS SAMUEL PODADERA GONZÁLEZ
 * <p>
 * Desarrollo Interfaces Desarrollo de aplicaciones multiplataforma 2024/2025
 * </p>
 */
public class PruebaProgressBarExtended extends javax.swing.JFrame {

    /**
     * Constructor de la clase {@code PruebaProgressBarExtended}.
     * <p>
     * Inicializa la ventana principal con un deslizador y una barra de progreso
     * extendida. Configura el título, centra la ventana en la pantalla y
     * establece el valor inicial del deslizador en la barra de progreso.
     * </p>
     */
    public PruebaProgressBarExtended() {
        initComponents();
        this.setTitle("Prueba de componente ProgressBarExtended"); // Establece el título del JFrame
        this.setLocationRelativeTo(null); // Centra el JFrame en la pantalla
        this.establecerValor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTextoValorSlider = new javax.swing.JLabel();
        jSliderRango = new javax.swing.JSlider();
        progressBarExtended1 = new progressbarextendedapg.ProgressBarExtended();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelTextoValorSlider.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelTextoValorSlider.setText("El valor del slider es: 50%");

        jSliderRango.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jSliderRango.setMajorTickSpacing(10);
        jSliderRango.setMinorTickSpacing(5);
        jSliderRango.setPaintLabels(true);
        jSliderRango.setPaintTicks(true);
        jSliderRango.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderRangoStateChanged(evt);
            }
        });

        progressBarExtended1.setColor1(new java.awt.Color(255, 0, 51));
        progressBarExtended1.setColor2(new java.awt.Color(0, 153, 153));
        progressBarExtended1.setColor3(new java.awt.Color(255, 255, 0));
        progressBarExtended1.setRangos(new progressbarextendedapg.Rangos(50.0, 75.0));
        progressBarExtended1.setStringPainted(true);
        progressBarExtended1.addRangoAlcanzadoListener(new progressbarextendedapg.ProgressBarExtended.RangoAlcanzadoListener() {
            public void capturarZona1Alcanzada(progressbarextendedapg.ProgressBarExtended.RangoAlcanzado evt) {
                progressBarExtended1CapturarZona1Alcanzada(evt);
            }
            public void capturarZona2Alcanzada(progressbarextendedapg.ProgressBarExtended.RangoAlcanzado evt) {
                progressBarExtended1CapturarZona2Alcanzada(evt);
            }
            public void capturarZona3Alcanzada(progressbarextendedapg.ProgressBarExtended.RangoAlcanzado evt) {
                progressBarExtended1CapturarZona3Alcanzada(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBarExtended1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSliderRango, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(jLabelTextoValorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(185, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabelTextoValorSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSliderRango, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progressBarExtended1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento que se ejecuta cuando el valor del deslizador
     * ({@code jSliderRango}) cambia.
     * <p>
     * Este método actualiza el valor del texto de la etiqueta que muestra el
     * porcentaje actual del deslizador y sincroniza el valor con la barra de
     * progreso extendida.
     * </p>
     *
     * @param evt El evento de cambio asociado al deslizador.
     */
    private void jSliderRangoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderRangoStateChanged
        this.establecerValor();
    }//GEN-LAST:event_jSliderRangoStateChanged

    /**
     * Evento que se ejecuta cuando se alcanza la zona 1 en la barra de progreso
     * extendida.
     * <p>
     * Muestra un mensaje emergente indicando que se ha alcanzado la zona 1.
     * </p>
     *
     * @param evt El evento asociado al cambio de zona.
     */
    private void progressBarExtended1CapturarZona1Alcanzada(progressbarextendedapg.ProgressBarExtended.RangoAlcanzado evt) {//GEN-FIRST:event_progressBarExtended1CapturarZona1Alcanzada
        // Define el mensaje y el título
        String mensaje = "Se ha alcanzado la zona 1";
        String titulo = "ZONA 1";

        // Muestra el JOptionPane con el título y mensaje especificados
        JOptionPane.showMessageDialog(null, mensaje, titulo, JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_progressBarExtended1CapturarZona1Alcanzada

    /**
     * Evento que se ejecuta cuando se alcanza la zona 2 en la barra de progreso
     * extendida.
     * <p>
     * Muestra un mensaje emergente indicando que se ha alcanzado la zona 2.
     * </p>
     *
     * @param evt El evento asociado al cambio de zona.
     */
    private void progressBarExtended1CapturarZona2Alcanzada(progressbarextendedapg.ProgressBarExtended.RangoAlcanzado evt) {//GEN-FIRST:event_progressBarExtended1CapturarZona2Alcanzada
        // Define el mensaje y el título
        String mensaje = "Se ha alcanzado la zona 2";
        String titulo = "ZONA 2";

        // Muestra el JOptionPane con el título y mensaje especificados
        JOptionPane.showMessageDialog(null, mensaje, titulo, JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_progressBarExtended1CapturarZona2Alcanzada

    /**
     * Evento que se ejecuta cuando se alcanza la zona 3 en la barra de progreso
     * extendida.
     * <p>
     * Muestra un mensaje emergente indicando que se ha alcanzado la zona 3.
     * </p>
     *
     * @param evt El evento asociado al cambio de zona.
     */
    private void progressBarExtended1CapturarZona3Alcanzada(progressbarextendedapg.ProgressBarExtended.RangoAlcanzado evt) {//GEN-FIRST:event_progressBarExtended1CapturarZona3Alcanzada
        // Define el mensaje y el título
        String mensaje = "Se ha alcanzado la zona 3";
        String titulo = "ZONA 3";

        // Muestra el JOptionPane con el título y mensaje especificados
        JOptionPane.showMessageDialog(null, mensaje, titulo, JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_progressBarExtended1CapturarZona3Alcanzada

    /**
     * Método principal que inicia la ejecución de la aplicación.
     * <p>
     * Configura el estilo de la interfaz gráfica (Nimbus) y crea la ventana
     * principal para que sea visible.
     * </p>
     *
     * @param args Argumentos de la línea de comandos (no utilizados).
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PruebaProgressBarExtended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PruebaProgressBarExtended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PruebaProgressBarExtended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PruebaProgressBarExtended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PruebaProgressBarExtended().setVisible(true);
            }
        });
    }

    /**
     * Establece el valor del deslizador en la barra de progreso extendida.
     * <p>
     * Sincroniza el texto que muestra el porcentaje actual del deslizador con
     * el valor de la barra de progreso.
     * </p>
     */
    public void establecerValor() {
        this.jLabelTextoValorSlider.setText("El valor del slider es: " + this.jSliderRango.getValue());
        this.progressBarExtended1.setValue(this.jSliderRango.getValue());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelTextoValorSlider;
    private javax.swing.JSlider jSliderRango;
    private progressbarextendedapg.ProgressBarExtended progressBarExtended1;
    // End of variables declaration//GEN-END:variables
}
